## Compute the bernoulli variable D from X & Y values
for (i in 1:n) {
if ((X[i]^2+Y[i]^2)<1){
bernoulli_outcome[i] = 1
}
else{
bernoulli_outcome[i] = 0
}
}
# return the vector of outcomes for bernoulli variable
return(list(X=X,Y=Y,D=bernoulli_outcome))
}
n = 100
p = pi/4
result = uniform_circ_dist(n,p)
X = unlist(X)
Y = unlist(Y)
D = as.numeric(unlist(result[3]))
## Plot the X & Y data points
## and color them based on their position relative to the unit circle
dataColor=c()
dataColor[(X^2+Y^2)<1] = "green"
dataColor[(X^2+Y^2)>=1] = "red"
plot(X,Y, col=dataColor, asp=1, xaxs="i",yaxs="i",
xlim =c(-1.5,1.5), ylim=c(-1.5,1.5),
cex.main=0.8, cex.lab=1,cex.sub=0.8,
main ="Fig6: Draw of 100 point sample of X & Y
from uniform distributions: U[-1,1]", xlab="X", ylab = "Y",
sub = "Green = Inside Unit Circle, Red = Outside Unit Circle"
)
# Superimpose a unit circle and sample space sqaure
draw.circle(0,0,1,nv=1000,border=NULL,lty=1,density=NULL,
angle=45,lwd=0.5)
rect(-1,-1,1,1,lwd=0.5)
# Draw random sample of X & Y from uniform distributions
n=100
X = runif(n,min=-1,max=1)
Y = runif(n,min=-1,max=1)
# Define the function to compute bernoulli random variable D
uniform_circ_dist = function(n,p){
# Draw random sample of X & Y from uniform distributions
X = runif(n,min=-1,max=1)
Y = runif(n,min=-1,max=1)
bernoulli_outcome = c()
## Compute the bernoulli variable D from X & Y values
for (i in 1:n) {
if ((X[i]^2+Y[i]^2)<1){
bernoulli_outcome[i] = 1
}
else{
bernoulli_outcome[i] = 0
}
}
# return the vector of outcomes for bernoulli variable
return(list(X=X,Y=Y,D=bernoulli_outcome))
}
n = 100
p = pi/4
result = uniform_circ_dist(n,p)
X = unlist(X)
Y = unlist(Y)
D = as.numeric(unlist(result[3]))
## Plot the X & Y data points
## and color them based on their position relative to the unit circle
dataColor=c()
dataColor[(X^2+Y^2)<1] = "green"
dataColor[(X^2+Y^2)>=1] = "red"
plot(X,Y, col=dataColor, asp=1, xaxs="i",yaxs="i",
xlim =c(-1.5,1.5), ylim=c(-1.5,1.5),
cex.main=0.8, cex.lab=1,cex.sub=0.8,
main ="Fig6: Draw of 100 point sample of X & Y
from uniform distributions: U[-1,1]", xlab="X", ylab = "Y",
sub = "Green = Inside Unit Circle, Red = Outside Unit Circle"
)
legend(1,95, legend=c("Red",'Green'))
# Superimpose a unit circle and sample space sqaure
draw.circle(0,0,1,nv=1000,border=NULL,lty=1,density=NULL,
angle=45,lwd=0.5)
rect(-1,-1,1,1,lwd=0.5)
# Draw random sample of X & Y from uniform distributions
n=100
X = runif(n,min=-1,max=1)
Y = runif(n,min=-1,max=1)
# Define the function to compute bernoulli random variable D
uniform_circ_dist = function(n,p){
# Draw random sample of X & Y from uniform distributions
X = runif(n,min=-1,max=1)
Y = runif(n,min=-1,max=1)
bernoulli_outcome = c()
## Compute the bernoulli variable D from X & Y values
for (i in 1:n) {
if ((X[i]^2+Y[i]^2)<1){
bernoulli_outcome[i] = 1
}
else{
bernoulli_outcome[i] = 0
}
}
# return the vector of outcomes for bernoulli variable
return(list(X=X,Y=Y,D=bernoulli_outcome))
}
n = 100
p = pi/4
result = uniform_circ_dist(n,p)
X = unlist(X)
Y = unlist(Y)
D = as.numeric(unlist(result[3]))
## Plot the X & Y data points
## and color them based on their position relative to the unit circle
dataColor=c()
dataColor[(X^2+Y^2)<1] = "green"
dataColor[(X^2+Y^2)>=1] = "red"
plot(X,Y, col=dataColor, asp=1, xaxs="i",yaxs="i",
xlim =c(-1.5,1.5), ylim=c(-1.5,1.5),
cex.main=0.8, cex.lab=1,cex.sub=0.8,
main ="Fig6: Draw of 100 point sample of X & Y
from uniform distributions: U[-1,1]", xlab="X", ylab = "Y",
sub = "Green = Inside Unit Circle, Red = Outside Unit Circle"
legend=c("Red","Green")
# Draw random sample of X & Y from uniform distributions
n=100
X = runif(n,min=-1,max=1)
Y = runif(n,min=-1,max=1)
# Define the function to compute bernoulli random variable D
uniform_circ_dist = function(n,p){
# Draw random sample of X & Y from uniform distributions
X = runif(n,min=-1,max=1)
Y = runif(n,min=-1,max=1)
bernoulli_outcome = c()
## Compute the bernoulli variable D from X & Y values
for (i in 1:n) {
if ((X[i]^2+Y[i]^2)<1){
bernoulli_outcome[i] = 1
}
else{
bernoulli_outcome[i] = 0
}
}
# return the vector of outcomes for bernoulli variable
return(list(X=X,Y=Y,D=bernoulli_outcome))
}
n = 100
p = pi/4
result = uniform_circ_dist(n,p)
X = unlist(X)
Y = unlist(Y)
D = as.numeric(unlist(result[3]))
## Plot the X & Y data points
## and color them based on their position relative to the unit circle
dataColor=c()
dataColor[(X^2+Y^2)<1] = "green"
dataColor[(X^2+Y^2)>=1] = "red"
plot(X,Y, col=dataColor, asp=1, xaxs="i",yaxs="i",
xlim =c(-1.5,1.5), ylim=c(-1.5,1.5),
cex.main=0.8, cex.lab=1,cex.sub=0.8,
main ="Fig6: Draw of 100 point sample of X & Y
from uniform distributions: U[-1,1]", xlab="X", ylab = "Y",
sub = "Green = Inside Unit Circle, Red = Outside Unit Circle",
legend=c("Red","Green")
)
# Superimpose a unit circle and sample space sqaure
draw.circle(0,0,1,nv=1000,border=NULL,lty=1,density=NULL,
angle=45,lwd=0.5)
rect(-1,-1,1,1,lwd=0.5)
# Draw random sample of X & Y from uniform distributions
n=100
X = runif(n,min=-1,max=1)
Y = runif(n,min=-1,max=1)
# Define the function to compute bernoulli random variable D
uniform_circ_dist = function(n,p){
# Draw random sample of X & Y from uniform distributions
X = runif(n,min=-1,max=1)
Y = runif(n,min=-1,max=1)
bernoulli_outcome = c()
## Compute the bernoulli variable D from X & Y values
for (i in 1:n) {
if ((X[i]^2+Y[i]^2)<1){
bernoulli_outcome[i] = 1
}
else{
bernoulli_outcome[i] = 0
}
}
# return the vector of outcomes for bernoulli variable
return(list(X=X,Y=Y,D=bernoulli_outcome))
}
n = 100
p = pi/4
result = uniform_circ_dist(n,p)
X = unlist(X)
Y = unlist(Y)
D = as.numeric(unlist(result[3]))
## Plot the X & Y data points
## and color them based on their position relative to the unit circle
dataColor=c()
dataColor[(X^2+Y^2)<1] = "green"
dataColor[(X^2+Y^2)>=1] = "red"
plot(X,Y, col=dataColor, asp=1, xaxs="i",yaxs="i",
xlim =c(-1.5,1.5), ylim=c(-1.5,1.5),
cex.main=0.8, cex.lab=1,cex.sub=0.8,
main ="Fig6: Draw of 100 point sample of X & Y
from uniform distributions: U[-1,1]", xlab="X", ylab = "Y",
sub = "Green = Inside Unit Circle, Red = Outside Unit Circle",
)
# Superimpose a unit circle and sample space sqaure
draw.circle(0,0,1,nv=1000,border=NULL,lty=1,density=NULL,
angle=45,lwd=0.5)
rect(-1,-1,1,1,lwd=0.5)
# Draw random sample of X & Y from uniform distributions
n=100
X = runif(n,min=-1,max=1)
Y = runif(n,min=-1,max=1)
# Define the function to compute bernoulli random variable D
uniform_circ_dist = function(n,p){
# Draw random sample of X & Y from uniform distributions
X = runif(n,min=-1,max=1)
Y = runif(n,min=-1,max=1)
bernoulli_outcome = c()
## Compute the bernoulli variable D from X & Y values
for (i in 1:n) {
if ((X[i]^2+Y[i]^2)<1){
bernoulli_outcome[i] = 1
}
else{
bernoulli_outcome[i] = 0
}
}
# return the vector of outcomes for bernoulli variable
return(list(X=X,Y=Y,D=bernoulli_outcome))
}
n = 100
p = pi/4
result = uniform_circ_dist(n,p)
X = unlist(X)
Y = unlist(Y)
D = as.numeric(unlist(result[3]))
## Plot the X & Y data points
## and color them based on their position relative to the unit circle
dataColor=c()
dataColor[(X^2+Y^2)<1] = "green"
dataColor[(X^2+Y^2)>=1] = "red"
plot(X,Y, col=dataColor, asp=1, xaxs="i",yaxs="i",
xlim =c(-1.5,1.5), ylim=c(-1.5,1.5),
cex.main=0.8, cex.lab=1,cex.sub=0.8,
main ="Fig6: Draw of 100 point sample of X & Y
from uniform distributions: U[-1,1]", xlab="X", ylab = "Y",
sub = "Green = Inside Unit Circle, Red = Outside Unit Circle",
)
# Add a legend to the plot
legend(1, 95, legend=c("Line 1", "Line 2"),
col=c("red", "blue"), lty=1:2, cex=0.8,
title="Line types", text.font=4, bg='lightblue')
# Superimpose a unit circle and sample space sqaure
draw.circle(0,0,1,nv=1000,border=NULL,lty=1,density=NULL,
angle=45,lwd=0.5)
rect(-1,-1,1,1,lwd=0.5)
# Draw random sample of X & Y from uniform distributions
n=100
X = runif(n,min=-1,max=1)
Y = runif(n,min=-1,max=1)
# Define the function to compute bernoulli random variable D
uniform_circ_dist = function(n,p){
# Draw random sample of X & Y from uniform distributions
X = runif(n,min=-1,max=1)
Y = runif(n,min=-1,max=1)
bernoulli_outcome = c()
## Compute the bernoulli variable D from X & Y values
for (i in 1:n) {
if ((X[i]^2+Y[i]^2)<1){
bernoulli_outcome[i] = 1
}
else{
bernoulli_outcome[i] = 0
}
}
# return the vector of outcomes for bernoulli variable
return(list(X=X,Y=Y,D=bernoulli_outcome))
}
n = 100
p = pi/4
result = uniform_circ_dist(n,p)
X = unlist(X)
Y = unlist(Y)
D = as.numeric(unlist(result[3]))
## Plot the X & Y data points
## and color them based on their position relative to the unit circle
dataColor=c()
dataColor[(X^2+Y^2)<1] = "green"
dataColor[(X^2+Y^2)>=1] = "red"
plot(X,Y, col=dataColor, asp=1, xaxs="i",yaxs="i",
xlim =c(-1.5,1.5), ylim=c(-1.5,1.5),
cex.main=0.8, cex.lab=1,cex.sub=0.8,
main ="Fig6: Draw of 100 point sample of X & Y
from uniform distributions: U[-1,1]", xlab="X", ylab = "Y",
sub = "Green = Inside Unit Circle, Red = Outside Unit Circle",
)
# Superimpose a unit circle and sample space sqaure
draw.circle(0,0,1,nv=1000,border=NULL,lty=1,density=NULL,
angle=45,lwd=0.5)
rect(-1,-1,1,1,lwd=0.5)
plot(X,Y, col=dataColor, asp=1, xaxs="i",yaxs="i",
xlim =c(-1.5,1.5), ylim=c(-1.5,1.5),
cex.main=0.8, cex.lab=1,cex.sub=0.8,
main ="Fig6: Draw of 100 point sample of X & Y
from uniform distributions: U[-1,1]", xlab="X", ylab = "Y",
sub = "Green = Inside Unit Circle, Red = Outside Unit Circle",
)
# Draw random sample of X & Y from uniform distributions
n=100
X = runif(n,min=-1,max=1)
Y = runif(n,min=-1,max=1)
# Define the function to compute bernoulli random variable D
uniform_circ_dist = function(n,p){
# Draw random sample of X & Y from uniform distributions
X = runif(n,min=-1,max=1)
Y = runif(n,min=-1,max=1)
bernoulli_outcome = c()
## Compute the bernoulli variable D from X & Y values
for (i in 1:n) {
if ((X[i]^2+Y[i]^2)<1){
bernoulli_outcome[i] = 1
}
else{
bernoulli_outcome[i] = 0
}
}
# return the vector of outcomes for bernoulli variable
return(list(X=X,Y=Y,D=bernoulli_outcome))
}
n = 100
p = pi/4
result = uniform_circ_dist(n,p)
X = unlist(X)
Y = unlist(Y)
D = as.numeric(unlist(result[3]))
## Plot the X & Y data points
## and color them based on their position relative to the unit circle
dataColor=c()
dataColor[(X^2+Y^2)<1] = "green"
dataColor[(X^2+Y^2)>=1] = "red"
plot(X,Y, col=dataColor, asp=1, xaxs="i",yaxs="i",
xlim =c(-1.5,1.5), ylim=c(-1.5,1.5),
cex.main=0.8, cex.lab=1,cex.sub=0.8,
main ="Fig6: Draw of 100 point sample of X & Y
from uniform distributions: U[-1,1]", xlab="X", ylab = "Y",
sub = "Green = Inside Unit Circle, Red = Outside Unit Circle",
)
# Superimpose a unit circle and sample space sqaure
draw.circle(0,0,1,nv=1000,border=NULL,lty=1,density=NULL,
angle=45,lwd=0.5)
rect(-1,-1,1,1,lwd=0.5)
# Draw random sample of X & Y from uniform distributions
n=100
X = runif(n,min=-1,max=1)
Y = runif(n,min=-1,max=1)
# Define the function to compute bernoulli random variable D
uniform_circ_dist = function(n,p){
# Draw random sample of X & Y from uniform distributions
X = runif(n,min=-1,max=1)
Y = runif(n,min=-1,max=1)
bernoulli_outcome = c()
## Compute the bernoulli variable D from X & Y values
for (i in 1:n) {
if ((X[i]^2+Y[i]^2)<1){
bernoulli_outcome[i] = 1
}
else{
bernoulli_outcome[i] = 0
}
}
# return the vector of outcomes for bernoulli variable
return(list(X=X,Y=Y,D=bernoulli_outcome))
}
n = 100
p = pi/4
result = uniform_circ_dist(n,p)
X = unlist(X)
Y = unlist(Y)
D = as.numeric(unlist(result[3]))
## Plot the X & Y data points
## and color them based on their position relative to the unit circle
dataColor=c()
dataColor[(X^2+Y^2)<1] = "green"
dataColor[(X^2+Y^2)>=1] = "red"
plot(X,Y, col=dataColor, asp=1, xaxs="i",yaxs="i",
xlim =c(-1.5,1.5), ylim=c(-1.5,1.5),
cex.main=0.8, cex.lab=1,cex.sub=0.8,
main ="Fig6: Draw of 100 point sample of X & Y
from uniform distributions: U[-1,1]", xlab="X", ylab = "Y",
sub = "Green = Inside Unit Circle, Red = Outside Unit Circle"
)
# Superimpose a unit circle and sample space sqaure
draw.circle(0,0,1,nv=1000,border=NULL,lty=1,density=NULL,
angle=45,lwd=0.5)
rect(-1,-1,1,1,lwd=0.5)
# Draw random sample of X & Y from uniform distributions
n=100
X = runif(n,min=-1,max=1)
Y = runif(n,min=-1,max=1)
# Define the function to compute bernoulli random variable D
uniform_circ_dist = function(n,p){
# Draw random sample of X & Y from uniform distributions
X = runif(n,min=-1,max=1)
Y = runif(n,min=-1,max=1)
bernoulli_outcome = c()
## Compute the bernoulli variable D from X & Y values
for (i in 1:n) {
if ((X[i]^2+Y[i]^2)<1){
bernoulli_outcome[i] = 1
}
else{
bernoulli_outcome[i] = 0
}
}
# return the vector of outcomes for bernoulli variable
return(list(X=X,Y=Y,D=bernoulli_outcome))
}
n = 100
p = pi/4
result = uniform_circ_dist(n,p)
X = unlist(X)
Y = unlist(Y)
D = as.numeric(unlist(result[3]))
## Plot the X & Y data points
## and color them based on their position relative to the unit circle
dataColor=c()
dataColor[(X^2+Y^2)<1] = "green"
dataColor[(X^2+Y^2)>=1] = "red"
plot(X,Y, col=dataColor, asp=1, xaxs="i",yaxs="i",
xlim =c(-1.5,1.5), ylim=c(-1.5,1.5),
cex.main=0.8, cex.lab=1,cex.sub=0.8,
main ="Fig6: Draw of 100 point sample of X & Y
from uniform distributions: U[-1,1]", xlab="X", ylab = "Y",
sub = "Green = Inside Unit Circle, Red = Outside Unit Circle"
)
# Superimpose a unit circle and sample space sqaure
draw.circle(0,0,1,nv=1000,border=NULL,lty=1,density=NULL,
angle=45,lwd=0.5)
rect(-1,-1,1,1,lwd=0.5)
knitr::opts_chunk$set(echo = TRUE)
library("plotrix")
library("knitr")
library("kableExtra")
library("ggplot2")
curve((1/((99/2^x)+1)),0,20,xaxs="i",yaxs="i",
main = "Fig1: Conditional Probability of the coin being a trick coin
given k heads have occurred in a row",
sub = "P(T:Trick Coin) = 0.01 and trick coin always shows heads[i.e, P(H|T)=1]",
ylab = 'Conditional Probability', xlab = 'k = Number of heads in a row',
cex.main=0.8, cex.sub=0.8,cex.lab=0.8,col="blue",lwd=2)
x0 = c(-1,0.1,1)
y0 = c(-1,0.1,1)
curve(x*1,0,1, xlim=c(-1,1),ylim=c(-1,1), ylab="Y", xlab="X", xaxs="i",yaxs="i",
main="Fig5: Region of positive probability density
for Di is the unit circle inscribed in sample space square","
sub = "Di is 1 when X,Y lie in the unit circle and 0 otherwise;
x0 = c(-1,0.1,1)
y0 = c(-1,0.1,1)
curve(x*1,0,1, xlim=c(-1,1),ylim=c(-1,1), ylab="Y", xlab="X", xaxs="i",yaxs="i",
main="Fig5: Region of positive probability density
for Di is the unit circle inscribed in sample space square",
sub = "Di is 1 when X,Y lie in the unit circle and 0 otherwise;
Xi,Yi ~ U[-1,1]",
asp=1, cex.main=0.8, cex.lab=1)
rect(-1,-1,1,1,col='lightgray')
draw.circle(0,0,1,nv=100,border=NULL,col="lightblue",lty=1,density=NULL,
angle=45,lwd=0.4)
x0 = c(-1,0.1,1)
y0 = c(-1,0.1,1)
curve(x*1,0,1, xlim=c(-1,1),ylim=c(-1,1), ylab="Y", xlab="X", xaxs="i",yaxs="i",
main="Fig5: Region of positive probability density
for Di is the unit circle inscribed in sample space square",
asp=1, cex.main=0.8, cex.lab=1)
rect(-1,-1,1,1,col='lightgray')
draw.circle(0,0,1,nv=100,border=NULL,col="lightblue",lty=1,density=NULL,
angle=45,lwd=0.4)
df = data.frame(p,mean(D), sprintf("%0.3f%%",abs(1-mean(D)/p)*100))
kable(df, booktabs = T,position = "center", align = "c",
format= "pandoc",
digits = 3,
caption = "Comparison of simulated and algebraic sample averages of
Bernoulli Di (Sample consists of 100 draws of Xi,Yi ~ U[-1,1)",
col.names=(c("Simulated ","Algebraic","Percent Difference"))
)
n = 100
p = pi/4
reps = 10000
X = runif(n,min=-1,max=1)
Y = runif(n,min=-1,max=1)
mean_sample_averages = replicate(reps, mean(unlist(uniform_circ_dist(n,p)[3])))
hist(mean_sample_averages, breaks=25, xlim=c(0.60,0.95),ylim=c(0,1000), cex.main=0.8, cex.lab=1,cex.sub=0.8,
main = "Fig7: Distribution of sample average of Di ~ B(1,0.785) is normal centered at algebriac mean",
sub = "10k replications of 100 point draws each for Xi,Yi ~ U[-1,1]",
xlab = "Sample Average of Di")
df = data.frame(p,mean(D), sprintf("%0.3f%%",abs(1-mean(D)/p)*100))
kable(df, booktabs = T,position = "center", align = "c",
format= "pandoc",
digits = 3,
caption = "Comparison of simulated and algebraic sample averages of
Bernoulli Di (Sample consists of 100 draws of Xi,Yi ~ U[-1,1])",
col.names=(c("Simulated ","Algebraic","Percent Difference"))
)
n = 100
p = pi/4
reps = 10000
X = runif(n,min=-1,max=1)
Y = runif(n,min=-1,max=1)
mean_sample_averages = replicate(reps, mean(unlist(uniform_circ_dist(n,p)[3])))
hist(mean_sample_averages, breaks=25, xlim=c(0.60,0.95),ylim=c(0,1000), cex.main=0.8, cex.lab=1,cex.sub=0.8,
main = "Fig 7: Distribution of sample average of Di ~ B(1,0.785) is normal centered at algebriac mean",
sub = "10k replications of 100 point draws each for Xi,Yi ~ U[-1,1]",
xlab = "Sample Average of Di")
