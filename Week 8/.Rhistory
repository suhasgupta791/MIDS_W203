for sample average of Di being greater than 0.75 [Di ~ B(1,0.785; 10k repititions of 100 sample point draws of Xi,Yi were performed; Xi,Yi ~ U[-1,1]]",
col.names=(c("Simulated Probability","Algebraic Probability","Percent Difference"))
)
a = length(which(mean_sample_averages >= 0.75))
sim_prob = a/reps
df <- data.frame(sim_prob,
1-pnorm(-0.86), sprintf("%.3f%%",100*abs(1-sim_prob/(1-pnorm(-0.86)))))
kable(df, booktabs = T, position = "center", align = "c",
format= "pandoc",
digits = 3,
caption = "Comparison of simulated and algebraic probabilities
for sample average of Di being greater than 0.75 (Di ~ B(1,0.785; 10k repititions of 100 sample point draws of Xi,Yi were performed; Xi,Yi ~ U[-1,1])",
col.names=(c("Simulated Probability","Algebraic Probability","Percent Difference"))
)
a = length(which(mean_sample_averages >= 0.75))
sim_prob = a/reps
df <- data.frame(sim_prob,
1-pnorm(-0.86), sprintf("%.3f%%",100*abs(1-sim_prob/(1-pnorm(-0.86)))))
kable(df, booktabs = T, position = "center", align = "c",
format= "pandoc",
digits = 3,
caption = "Comparison of simulated and algebraic probabilities
for sample average of Di being greater than 0.75 (Di ~ B(1,0.785; 10k repititions of 100 sample draws of Xi,Yi were performed; Xi,Yi ~ U[-1,1])",
col.names=(c("Simulated Probability","Algebraic Probability","Percent Difference"))
)
x0 = c(-1,0.1,1)
y0 = c(-1,0.1,1)
curve(x*1,0,1, xlim=c(-1,1),ylim=c(-1,1), ylab="Y", xlab="X", xaxs="i",yaxs="i",
main="Fig5: Region of positive probability density for Di is the unit circle shaded in blue
(Di is 1 when X,Y lie in the unit circle and 0 otherwise; Xi,Yi ~ U[-1,1])",
asp=1, cex.main=0.8, cex.lab=1)
rect(-1,-1,1,1,col='lightgray')
draw.circle(0,0,1,nv=100,border=NULL,col="lightblue",lty=1,density=NULL,
angle=45,lwd=0.4)
# Draw random sample of X & Y from uniform distributions
n=100
X = runif(n,min=-1,max=1)
Y = runif(n,min=-1,max=1)
# Define the function to compute bernoulli random variable D
uniform_circ_dist = function(n,p){
# Draw random sample of X & Y from uniform distributions
X = runif(n,min=-1,max=1)
Y = runif(n,min=-1,max=1)
bernoulli_outcome = c()
## Compute the bernoulli variable D from X & Y values
for (i in 1:n) {
if ((X[i]^2+Y[i]^2)<1){
bernoulli_outcome[i] = 1
}
else{
bernoulli_outcome[i] = 0
}
}
# return the vector of outcomes for bernoulli variable
return(list(X=X,Y=Y,D=bernoulli_outcome))
}
n = 100
p = pi/4
result = uniform_circ_dist(n,p)
X = unlist(X)
Y = unlist(Y)
D = as.numeric(unlist(result[3]))
## Plot the X & Y data points
## and color them based on their position relative to the unit circle
dataColor=c()
dataColor[(X^2+Y^2)<1] = "green"
dataColor[(X^2+Y^2)>=1] = "red"
plot(X,Y, col=dataColor, asp=1, xaxs="i",yaxs="i",
xlim =c(-1.5,1.5), ylim=c(-1.5,1.5),
cex.main=0.8, cex.lab=1,cex.sub=0.8,
main ="Fig6: Draw of 100 point sample of X & Y from uniform distributions: U[-1,1]", xlab="X", ylab = "Y",
sub = "Green = Inside Unit Circle, Red = Outside Unit Circle"
)
# Superimpose a unit circle and sample space sqaure
draw.circle(0,0,1,nv=1000,border=NULL,lty=1,density=NULL,
angle=45,lwd=0.5)
rect(-1,-1,1,1,lwd=0.5)
df = data.frame(p,mean(D), sprintf("%0.3f%%",abs(1-mean(D)/p)*100))
kable(df, booktabs = T,position = "center", align = "c",
format= "pandoc",
digits = 3,
caption = "Comparison of simulated and algebraic sample averages of bernoulli Di (Sample consists of 100 draws of Xi,Yi ~ U[-1,1)",
col.names=(c("Simulated ","Algebraic","Percent Difference"))
)
n = 100
p = pi/4
reps = 10000
X = runif(n,min=-1,max=1)
Y = runif(n,min=-1,max=1)
mean_sample_averages = replicate(reps, mean(unlist(uniform_circ_dist(n,p)[3])))
hist(mean_sample_averages, cex.main=0.8, cex.lab=1,cex.sub=0.8,
main = "Fig7: Distribution of sample average of Di ~ B(1,0.785)
(10k replications of 100 point draws for Xi,Yi ~ U[-1,1])",
sub = "D ~ B(1,0.785) represents (Xi,Yi) point lying inside a unit circle where Xi & Yi ~ U[-1,1]",
xlab = "Sample Average of Di")
# Theoretical variance and standard error of the sample average
sample_var = p*(1-p)/n
stderr = sqrt(sample_var)
df = data.frame(sd(mean_sample_averages),stderr,
sprintf("%0.3f%%",100*abs(1- sd(mean_sample_averages)/stderr)))
kable(df, format= "pandoc", booktable = T, longtable = T,
align="c", position="center",digits = 5,cex.main = 0.8,
caption="Comparison of simulated and algebraic standard errors for Di with 10k repititions of 100 point samples of Xi,Yi ~ U[-1,1].
(Di ~ B(1,0.785) with success defined as the event when Xi,Yi lie inside a unit circle)",
col.names=(c("Simulated Std. Error","Algebraic Std. Error","Percent Difference")))
a = length(which(mean_sample_averages >= 0.75))
sim_prob = a/reps
df <- data.frame(sim_prob,
1-pnorm(-0.86), sprintf("%.3f%%",100*abs(1-sim_prob/(1-pnorm(-0.86)))))
kable(df, booktabs = T, position = "center", align = "c",
format= "pandoc",
digits = 3,
caption = "Comparison of simulated and algebraic probabilities
for sample average of Di being greater than 0.75 (Di ~ B(1,0.785; 10k repititions of 100 point sample draws of Xi,Yi were performed; Xi,Yi ~ U[-1,1])",
col.names=(c("Simulated Probability","Algebraic Probability","Percent Difference"))
)
a = length(which(mean_sample_averages >= 0.75))
sim_prob = a/reps
df <- data.frame(sim_prob,
1-pnorm(-0.86), sprintf("%.3f%%",100*abs(1-sim_prob/(1-pnorm(-0.86)))))
kable(df, booktabs = T, position = "center", align = "c",
format= "pandoc",
digits = 3,
caption = "Comparison of simulated and algebraic probabilities
for sample average of Di being greater than 0.75 (Di ~ B(1,0.785; 10k repititions of 100 point
sample draws of Xi,Yi were performed; Xi,Yi ~ U[-1,1])",
col.names=(c("Simulated Probability","Algebraic Probability","Percent Difference"))
)
plot(cars)
knitr::opts_chunk$set(echo = TRUE)
?pnorm
pnorm(1)
pnorm(1.96)
pnorm(3)
pnorm(1)
pnorm(2)
pnorm(1.96)
dnorm(1.96)
dnorm(1)
pnorm(1)
pnorm(c(-1,1))
pnorm(1) - pnorm(-1)
pnorm(1.96) - pnorm(-1.96)
pnorm(3) - pnorm(-3)
pnorm(2)
pnorm(2) - pnorm(-2)
pnorm(4.47) - pnorm(-4.47)
pnorm(4.47) - pnorm(-4.47)
dnorm()
pnorm(4.47) - pnorm(-4.47)
dnorm(1)
pnorm(4.47) - pnorm(-4.47)
rnorm(1)
plot(rnorm(1))
plot(rnorm(2))
plot(rnorm(2000))
dnorm(c(-1,1))
dunif(1)
dunif(c(-1,1))
punif(c(-1,1))
dunif(seq(-1,1,0.1))
plot(dunif(seq(-1,1,0.1)))
plot(dunif(seq(-1,1,length=100)))
plot(punif(seq(-1,1,length=100)))
plot(qunif(seq(-1,1,length=100)))
plot(runif(seq(-1,1,length=100)))
plot(punif(seq(-1,1,length=100)))
plot(dunif(seq(-1,1,length=100)))
plot(runif(seq(-1,1,length=100)))
plot(runif(10, min= - 1, max = 1))
plot(runif(10000, min= - 1, max = 1))
plot(punif(10000, min= - 1, max = 1))
plot(density(runif(10000, min= - 1, max = 1)))
plot(density(runif(2, min= - 1, max = 1)))
plot(density(runif(1, min= - 1, max = 1)))
plot(density(runif(4, min= - 1, max = 1)))
plot(density(runif(10, min= - 1, max = 1)))
plot(density(runif(12, min= - 1, max = 1)))
plot(density(runif(30, min= - 1, max = 1)))
plot(runinf(100,min=-1,max=1)
plot(runinf(100,min=-1,max=1))
plot(runif(100,min=-1,max=1))
dunif(x,min=-1,max=1)
plot(dunif(x,min=-1,max=1))
curve(dunif(x, min = 2, max = 6), 0, 8, ylim = c(0,
+ 0.5) , ylab = ”f(x)”, main = ”Uniform Density f(x)”)
curve(dunif(x, min = 2, max = 6), 0, 8, ylim = c(0, 0.5) , ylab = ”f(x)”, main = ”Uniform Density f(x)”)
curve(dunif(x, min = 2, max = 6), 0, 8, ylim = c(0, 0.5))
curve(dunif(x, min = -1, max = 1), 0, 8, ylim = c(0, 0.5))
curve(dunif(x, min = -1, max = 1), -2, 2, ylim = c(0, 0.5))
plot(dunif(x, min = -1, max = 1), -2, 2, ylim = c(0, 0.5))
plot(dunif(x, min = -1, max = 1), -2, 2, ylim = c(0, 0.5))
plot(dunif(x, min = -1, max = 1), -2, 2)
curve(dunif(x, min = -1, max = 1), -2, 2)
curve(dnorm(x, min = -1, max = 1), -2, 2)
curve(dnorm(x))
curve(dnorm(x),-1,1)
curve(dnorm(x),-100,100)
curve(dnorm(x),-10,10)
curve(dnorm(x),-5,5)
curve(pnorm(x),-5,5)
curve(pnorm(x),-5,5)
pnorm(5)
curve(pnorm(x),-5,5)
pnorm(3)
pnorm(3)
pnorm(3) - pnorm(-3)
pnorm(c(-3,3))
qnorm(3
qnorm(3)
qnorm(0.75)
pnorm(0.75)
qnorm(0.95)
dbinom(x,1,0.5)
curve(dbinom(x,1,0.5))
curve(pbinom(x,1,0.5))
curve(pbinom(x,1,0.5))
pbinom(1,1,0.5)
pbinom(1,100,0.5)
pbinom(50,100,0.5)
pbinom(1,1,0.5)
pbinom(1,1,0.5)
pbinom(1,1,0.5)
pbinom(1,1,0.5)
pbinom(1,1,0.5)
pbinom(1,1,0.5)
pbinom(1,1,0.5)
pbinom(25,10000,0.5)
pbinom(25,1000,0.5)
pbinom(25,1000,0.5)
pbinom(25,1000,0.5)
pbinom(25,1000,0.5)
pbinom(25,1000,0.5)
pbinom(250,1000,0.5)
pbinom(500,1000,0.5)
pbinom(5,1000,0.5)
dbinom(46:54, 100,0.5)
sum(dbinom(46:54, 100,0.5))
pbinom(46:54, 100,0.5)
sum(pbinom(46:54, 100,0.5))
pbinom(54,100,0.5) - pbinom(46,100,0.5)
pbinom(54,100,0.5) - pbinom(46,100,0.5)
sum(dbinom(46:54,100,0.5))
pbinom(54,10000,0.5) - pbinom(46,10000,0.5)
sum(dbinom(46:54,10000,0.5))
pbinom(54,1000,0.5) - pbinom(46,1000,0.5)
sum(dbinom(46:54,1000,0.5))
pbinom(540,1000,0.5) - pbinom(460,1000,0.5)
sum(dbinom(460:540,1000,0.5))
pbinom(540,1000,0.5) - pbinom(460,1000,0.5)
sum(dbinom(460:540,1000,0.5))
pnorm(-1:1)
pbinom(540,1000,0.5) - pbinom(460,1000,0.5)
sum(dbinom(460:540,1000,0.5))
sum(pnorm(-1:1))
pbinom(540,1000,0.5) - pbinom(460,1000,0.5)
sum(dbinom(460:540,1000,0.5))
pnorm(1) - pnorm(-1)
sum(dbinom(46:54,100,0.5))
pnorm(1) - pnorm(-1)
sum(dbinom(460:540,1000,0.5))
pnorm(1) - pnorm(-1)
qunif(0.7,min=2,max=32)
pnorm(2)
1-pnorm(2)
pnorm(2)
pnorm(2,lower.tail=F)
pnorm(3,lower.tail=T)
pnorm(10,lower.tail=F)
choose(20,5)
optim(choose(x-10,16) * choose(10,4)/choose(20,5))
optim(sum(choose(x-10,16) * choose(10,4)/choose(20,5))
curve(choose(x-10,16) * choose(10,4)/choose(20,5)
curve(choose(x-10,16) * choose(10,4)/choose(20,5))
curve(choose(x-10,16) * choose(10,4)/choose(x,20))
curve(choose(x-10,16) * choose(10,4)/choose(x,20),from=0,to=100)
curve(choose(x-10,16) * choose(10,4)/choose(x,20),from=0,to=60)
curve(choose(x-10,16) * choose(10,4)/choose(x,20),from=20,to=60)
curve(choose(x-10,16) * choose(10,4)/choose(x,20),from=20,to=60)
optim(40,choose(x-10,16) * choose(10,4)/choose(x,20))
curve(choose(x-10,16) * choose(10,4)/choose(x,20),from=20,to=60)
optim(40,(choose(x-10,16) * choose(10,4)/choose(x,20)),lower=20,upper=100)
curve(choose(x-10,16) * choose(10,4)/choose(x,20),from=20,to=60)
function mle(x){
curve(choose(x-10,16) * choose(10,4)/choose(x,20),from=20,to=60)
mle = function (x){
return (choose(x-10,16) * choose(10,4)/choose(x,20))
}
optim(40,mle(x),lower=20,upper=100)
curve(choose(x-10,16) * choose(10,4)/choose(x,20),from=20,to=60)
mle = function (x){
prob = choose(x-10,16) * choose(10,4)/choose(x,20)
return(prob)
}
optim(40,mle(x),lower=20,upper=100)
curve(choose(x-10,16) * choose(10,4)/choose(x,20),from=20,to=60)
mle = function(x) {
prob = choose(x-10,16) * choose(10,4)/choose(x,20)
return(prob)
}
optim(40,mle(x),lower=20,upper=100)
curve(choose(x-10,16) * choose(10,4)/choose(x,20),from=20,to=60)
mle = function(x) {
prob = choose(x-10,16) * choose(10,4)/choose(x,20)
return(prob)
}
optimize(mle(x),lower=20,upper=100)
curve(choose(x-10,16) * choose(10,4)/choose(x,20),from=20,to=60)
mle = function(x) {
prob = choose(x-10,16) * choose(10,4)/choose(x,20)
return(prob)
}
optimize(x*1,lower=20,upper=100)
optimize(x*1,lower=20,upper=100)
optimize(function(x) x*1,lower=20,upper=100)
optimize(function(x) (choose(x-10, 16)*choose(10,4)/choose(x,20)),lower=20,upper=100)
optimize(function(x) -(choose(x-10, 16)*choose(10,4)/choose(x,20)),lower=20,upper=100)
curve(choose(x-10, 16)*choose(10,4)/choose(x,20))
optimize(function(x) -(choose(x-10, 16)*choose(10,4)/choose(x,20)),lower=20,upper=100)
curve(choose(x-10, 16)*choose(10,4)/choose(x,20),from=20,to=60)
optimize(function(x) -(choose(x-10, 16)*choose(10,4)/choose(x,20)),lower=20,upper=100)
curve(choose(x-10, 16)*choose(10,4)/choose(x,20),from=20,to=60)
optimize(function(x) -(choose(x-10, 16)*choose(10,4)/choose(x,20)),lower=20,upper=160)
curve(choose(x-10, 16)*choose(10,4)/choose(x,20),from=20,to=60)
optimize(function(x) -(choose(x-10, 16)*choose(10,4)/choose(x,20)),lower=20,upper=60)
curve(choose(x-10, 16)*choose(10,4)/choose(x,20),from=20,to=60)
optim(40, function(x) -(choose(x-10, 16)*choose(10,4)/choose(x,20)),lower=20,upper=60)
curve(choose(x-10, 16)*choose(10,4)/choose(x,20),from=20,to=60)
optimize(function(x) -(choose(x-10, 16)*choose(10,4)/choose(x,20)),lower=20,upper=60)
curve(pnorm(x,from=-4,to=4))
curve(pnorm(x))
curve(pnorm(x),-4,4)
curve(dnorm(x),-4,4)
ggplot(dnorm(x),-4,4)
ggplot2(dnorm(x),-4,4)
plot(dnorm(x),-4,4)
plot(dnorm(x),-4,4))
qnorm(0.95,0,1)
qnorm(0.95,0,1, lower.tail=F)
qnorm(0.95,0,1)
qnorm(0.95,100,15)
qnorm(0.05,100,15)
qnorm(0.05/2,100,15)
qnorm(0.975,100,15)
pnorm(2.4,0,1)
1-pnorm(2.4,0,1)
pnorm(2.4,0,1,lower.tail=F)
pnorm(inf)
pnorm(0)
pnorm(2.4)
1-pnorm(2.4)
1-pnorm(2.4596)
1-pnorm(0.95)
pnorm(0.95)
pnorm(0.05)
qnorm(0.95)
pt(1.65,3)
curve(dt(x,3))
curve(dt(x,3),-3,3,)
curve(dt(x,3),-3,3)
curve(dt(x,1:10),-3,3)
curve(dt(x,),-3,3,add=T)
curve(dt(x,3),-3,3,add=T)
plot(dt(x,3),-3,3,add=T)
plot(rt(x,3),-3,3,add=T)
dt(x,3)
x = seq(-3:0.01:3)
y = dt(x,3)
x = seq(-3:0.01:3)
y = dt(x,3)
pt(2.0017)
pt(2.0017,df=4)
pt(2.0017,df=4,lower.tail=F)
1-pt(2.0017,df=4)
1-pt(1.6667,df=99)
t.test(c(1,3,5,7,2),alternative=two.sided)
t.test(c(1,3,5,7,2),alternative=two.sided=T)
t.test(c(1,3,5,7,2),alternative=two.sided.T)
t.test(c(1,3,5,7,2),alternative=two.sided)
t.test(c(1,3,5,7,2),alternative="two.sided"")
t.test(c(1,3,5,7,2),mu=2.5, alternative="two.sided"")
t.test(c(1,3,5,7,2),mu=2.5)
t.test(c(1,3,5,7,2),mu=2.5,alternative=T)
t.test(c(1,3,5,7,2),mu=2.5,alternative='two.sided')
var(c(1,3,5,7,2))
t.test(c(1,3,5,7,2),mu=2.5,alternative='two.sided')
var(c(1,3,5,7,2))/4
t.test(c(1,3,5,7,2),mu=2.5,alternative='two.sided')
2*pt(0.9096,df=4)
t.test(c(1,3,5,7,2),mu=2.5,alternative='two.sided')
pt(0.9096,df=4)
t.test(c(1,3,5,7,2),mu=2.5,alternative='two.sided')
before.cig = c(25,25,27,44,30,67,53,53,52,60,28)
after.cig = c(27,29,37,56,46,82,57,80,61,59,43)
mu0 = 0
result = t.test(after.cig, before.cig, alternative="two.sided", mu=mu0, paired=TRUE)
print(result)
qnorm(0.975)
1-qnorm(0.05)
1-qnorm(0.05,lower.tail=T)
1-qnorm(0.05,lower.tail=F)
qnorm(0.05,lower.tail=F)
1-qnorm(0.025)
qnorm(0.025)
qnorm(0.025,lower.tail=f)
qnorm(0.025,lower.tail=F)
1-qnorm(0.25)
qnorm(0.25)
-qnorm(0.25)
-qnorm(0.1)
-qnorm(0.025)
pnorm(1.2)
1-pnorm(1.2)
?t.test
t.test(c(2.5,5,5,8.5,11.5), alternative='two.sided', mu=1,conf.level=95)
t.test(c(2.5,5,5,8.5,11.5), alternative='two.sided', mu=1,conf.level=.95)
t.test(c(2.5,5,5,8.5,11.5), alternative='two.sided',conf.level=.95)
t.test(c(2.5,5.5,8.5,11.5), alternative='two.sided',conf.level=.95)
t.test(c(2.5,5.5,8.5,11.5), alternative='two.sided',mu=1,conf.level=.95)
t.test(c(2.5,5.5,8.5,11.5), alternative='two.sided',mu=1,conf.level=.80)
t.test(c(2.5,5.5,8.5,11.5), alternative='two.sided',mu=1,conf.level=.50)
t.test(c(2.5,5.5,8.5,11.5), alternative='two.sided',mu=1,conf.level=.80)
t.test(c(2.5,5.5,8.5,11.5), alternative='two.sided',mu=1,conf.level=.95)
t.test(c(2.5,5.5,8.5,11.5), alternative='two.sided',mu=1,conf.level=.80)
pnorm(0.05)
pnorm(0.025)
qnorm(0.025)
-qnorm(0.025)
qnorm(0.975)
3 - qnorm(0.975)*1/3
qt(0.975,df=8)
qt(0.025,df=8)
# Calculate the 80% confidence interval for the mean.
ci = xbar - c(d[2], d[1]) cat(’Confidence interval: ’,ci, ’\n’)
cat(’Confidence interval: ’,ci, ’\n’)
cat(’Confidence interval: ’,ci)
cat(’Confidence interval: ’,ci)
cat('Confidence Interval: ', ci, '\n')
length(ci)
n = length(x)
n = length(x)
cat('Confidence Interval: ', ci, '\n')
?qqplot
qqplot(qnorm(x))
qqplot(qnorm(x),qnorm(x))
pnorm(1.96)
pnorm(1.96)
qnorm(0.975)
pnorm(1.96)
qnorm(0.975)
dnorm()
dnorm(x)
pnorm(1.96)
qnorm(0.975)
curve(dnorm(x))
dnorm(1.96)
pnorm(1.96)
qnorm(0.975)
dnorm(1.96)
pt(1.96)
pt(1.96,df=3)
pt(1.96,df=3)
qt(0.975,df=3)
pt(1.96,df=30)
qt(0.975,df=30)
pt(1.96,df=300)
qt(0.975,df=300)
pt(1.96,df=30)
qt(0.975,df=30)
pnorm(-2)
pnorm(-2)
1-pnorm(-2)
1-pnorm(-2/3)
pnorm(-2/3)
pnorm(1)
pnorm(1) - pnorm(-1)
pnorm(10)
pnorm(10,lower.tail=F)
pnorm(-0.707)
getwd()
setwd('/Users/suhasgupta/Library/Mobile\ Documents/com\~apple\~CloudDocs/MIDS\ Courses/W203\ Statistics/HomeWork/Week\ 8')
getwd()
setwd('/Users/suhasgupta/Library/Mobile\ Documents/com.apple.CloudDocs/MIDS\ Courses/W203\ Statistics/HomeWork/Week\ 8')
setwd('/Users/suhasgupta/Library/Mobile\ Documents/com~apple~CloudDocs/MIDS\ Courses/W203\ Statistics/HomeWork/Week\ 8')
getwd()
hist(data$skipped,breaks=5, main="Distribution of average number of classes skipped",
xlab="Average Number of classes skipped", ylab="Number of students")
load("gpa1.Rdata")
load("gpa1.Rdata")
nrow(data)
head(data)
summary(data$skipped)
hist(data$skipped,breaks=5, main="Distribution of average number of classes skipped",
xlab="Average Number of classes skipped", ylab="Number of students")
t.test(data$skipped,mu=1,alternative='two.sided')
x_bar = mean(data$skipped)
mu_0  = 1.0
x_sd = sd(data$skipped)
n = length(data$skipped)
df = n-1
t_score = sqrt(length(data$skipped))*(x_bar-mu_0)/x_sd
p_value = 2*pt(-t_score,df=df)
sprintf("t-statistics for skipped: %.3f", t_score)
sprintf("p value : %.3f", p_value)
alpha = 0.99
tile = 1-(1-alpha)/2
t_crit = qt(tile, df=df)
serr = t_crit *  x_sd /sqrt(n)
lower_limit = x_bar - serr
upper_limit = x_bar + serr
sprintf("99%% confidence interval for mean of skipped: [%f,%f]", lower_limit,upper_limit)
t.test(data$skipped,mu=1,alternative='two.sided',conf.level=0.99)
